Name: Junior Samaroo
User ID: jsamaroo
Student ID# 0663108
CIS3110 Assignment 3

..............................................SERVER................................................
.....................................DNNNNNN$.......................................................
.....................................NMMMMM$Z.......................................................
.....................................NMMMMM$Z.......................................................
.....................................MM..M:$Z.......................................................
.....................................NM.MM?7Z+=MMMMMMMMMMMMM........................................
.....................................MMZZZM$Z=+M..........M.........................................
.....................................MMMMMM$Z=+M..........M.........................................
.....................................NMMMMM$Z++M..........M.........................................
.....................................M......Z=+M..........M.........................................
.....................................NMMMM8MZ++MMMMMMMMMMMM.........................................
.....................................NMMMM8MZ+......................................................
.....................................MMMMMDMZ...?M$Z$$$$M+..........................................
...................................M.N......Z.Z+MMMMMMMMMMM.........................................
............................................:M.Z.MM..MM...+I7.......................................
........................................D?......M.....,.........8=..................................
....................................M..........N.......?.............MI.............................
...............................:$.............?.........~.................$I........................
............................N................=...........=....................?D.....D$$$$$$$$......
.......................==...................?.............~........................IMDM......M......
...................D......................,..........................................DM......M......
.....IMMMMMMM$=N.........................M..................=........................DMIIIIIII......
.....7M....OM...........................M....................I.......................MMZZZZZZZZ.....
.....7M....OM..........................N......................?.....................Z???++++????....
.....MNNNNNNM.........................,......................../....................N...............
....M7....==MM......................."..........................$...................MMMMMMMMMMMM....
.........MMM?=......................:............................?.....................CLIENT.......
......CLIENT...........----.......M...............................I$................................
.............................IMMMMMMMM........................7:IIIIIIIII...........................
.............................ID.....~M........................7N......=MI...........................
.............................ID.....=M........................7N......=MI...........................
.............................IMMMMMMMM........................7N......=MI...........................
.............................MMMMMMMMM........................7........MI...........................
.............................O????????M........................MMMMMMMMM............................
.............................NNMNNNNNNN........................NNNNNNNNN............................
...............................CLIENT...........................CLIENT..............................
....................................................................................................

Probelm Solved:
Client and server were both programmed successfully and seems to work flawlessly together.
-Time service successfully gets time from server and outputs to client stdout.
-Listing of files on server in a "list" format and outputs to client stdout works.
-Client can retreive a file of any size from the servers working directory onto the client's
	working directory, once it has read permissions, using the "get" command.
-Client can put a file from its working directory to the server's working directory with the
	specified USER permissions and also overwrite it if it already exists and has write permissions.
-Client can remotely execute a file on the server that has executable permissions, where the
	output of the program is sent to the client's stdout.
-Zombie processes were taken care of.

Design notes / How problem was solved:
-Server was set up to accept on all ports by setting all ports to a non-blocking mode
	using fcntl().
-Server is a persistent background process by forking and using accept() within a while(1) loop.
-Time was sent and received using a single read() and write() with the time string being known as 26bytes.
-"list" of files of server was obtained using the popen() and "ls" command.
-Any file size can be "get" using fstat() to determine file size and permissions.
	Once obtained the file can be sent byte by byte storing the data into a char buffer since
	linux does not distinguish between text and binary files. The data is then written from
	the buffer into a new file with the same name. File must have read permissions before it can
	be sent which is determined using open().
-Any file size can be "put" using fstat() to determine file size and permissions.
	Once obtained the file can be sent byte by byte storing the data into a char buffer since
	linux does not distinguish between text and binary files. The data is then written from
	the buffer into a new file with the same name. If the file already exists on the
	server, it must have write permissions to be overwritten. chmod() is then used to 
	change the permissions of an already existing file on the server. The permissions
	requested by the user is first converted from octal to decimal before it is
	used with chmod().
-Any file on the server can be executed from the client once it has necessary execution permissions.
	This permission is determined using the access() function. Once it is executed the output from
	the program's stdout and stderr is sent to the client. This is achieved by using the dup2() function
	and replacing the stdout and stderr descriptors with the clients socket connection file descriptor.
-Zombie processes were removed using a signal handler and SIGCHLD.
-Multiple connections on one port was achieved by forking appropriately.

Limitations/Assumptions:
-Packet text has a limitation of 1025 bytes. The packet structure has a fixed size. In "real-world"
	client and servers, the packet sizes are variable.
-Only TCP protocol is used. No implementation for UDP.
-In the "list" command it is assumed the list string sent has a max size of 1025.
-Since fork() was used to deal with multiple connections, in systems with many connections this technique may
	not be feasible due to resource constraints.
-In "put file" command it is assumed the user enters a number from 0-7 and not characters for the permissions.
-Forking was done for each request on the server, so that these services can be used by multiple clients.

Testing:
-Personal testing with resed and resec seemed to work flawlessly with each other. The time and list of 
	files from the server was successfully retrieved by the client. In "get" and "put" commands an "mp3" file
	of 4.1mb was able to transfer successfully with permissions. In testing the file execution service, the 
	output from a "hello world" program was seen in the client's terminal.
-In testing with other students, some services seemed to work while others did not. This may be due to
	other users implementing their client and server differently.
-Client and Server should be in different directories for best performance. Testing was done with client and
	server in different directories and different computers.

Improvements
-If given more time, resed and resec can be implemented using the UDP protocol.
-More services can also be added.

